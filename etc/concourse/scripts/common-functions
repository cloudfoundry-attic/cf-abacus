#!/bin/bash

APPS=()

function getApps {
  local LINE=$(cf apps | awk '{if (NR == 4) {print}}')

  if [ "$LINE" == "No apps found" ]; then
    echo "No apps found"
    APPS=()
  else
    APPS=($(cf apps | tail -n +5 | grep -E "$1" | awk '{print $1}'))
    echo "Found ${#APPS[@]} applications ..."
  fi
}

function getNewApps {
  local LINE=$(cf apps | awk '{if (NR == 4) {print}}')

  if [ "$LINE" == "No apps found" ]; then
    echo "No apps found"
    APPS=()
  else
    APPS=($(cf apps | tail -n +5 | grep -v "old" | grep -E "$1" | awk '{print $1}'))
    echo "Found ${#APPS[@]} applications ..."
  fi
}

function startApps {
  getNewApps

  echo "Starting applications ..."
  echo ${APPS[@]} | xargs -n1 -P 50 cf start
}

function restartApps {
  getApps '\?'
  echo ${APPS[@]} | xargs -n1 | grep -v -- "-old" | xargs -n1 -P 5 -r cf restart
  getApps '.*\s+0/.*'
  echo ${APPS[@]} | xargs -n1 | grep -v -- "-old" | xargs -n1 -P 5 -r cf restart
}

function restartAppsWithRetry {
  set +e
  retries=$RESTART_RETRIES
  if [[ -z "$retries" ]]; then
    retries=5
  elif [[ $retries -eq 0 ]]; then
    set -e
    return
  fi

  for (( i=1; i<=$retries ; i++ ))
  do
    if [[ $i -eq $retries ]]; then
      set -e
    fi
    echo "Restarting failed apps (retry $i / $retries) ..."
    restartApps

    if [[ $? -eq 0 ]]; then
      set -e
      return
    fi
  done
}

removeQuotes() {
    result="${1%\"}"
    result="${result#\"}"
    echo "$result"
}

get() {
    body="$1"
    query="$2"
    result=$(echo "$body" | jq "$query")
    echo "$(removeQuotes "$result")"
}

getServiceStatus() {
    service_guid=$1
    serivce_instance_body=$(cf curl "/v2/service_instances/$service_guid")
    service_instance_last_operation_type=$(get "$serivce_instance_body" '.entity.last_operation.type')
    service_instance_last_operation_state=$(get "$serivce_instance_body" '.entity.last_operation.state')

    echo "$service_instance_last_operation_type" "$service_instance_last_operation_state"
}

function waitForStatusAvailable {
  service_name="$1"
  service_guid=$(cf service "$service_name" --guid)

  echo "Waiting for $service_name to be in available state..."

  while [[ $(getServiceStatus "$service_guid" | grep "in progress") ]]; do
      sleep 3s
  done

  echo "$service_name finished its last operation (is no longer in progress)"
}

get_statuses_for_bound_services() {
    i="0"
    while [ $i -lt "$(($total_results))" ]
    do
        service_instance_guid=$(get "$app_service_bindings_body" '.resources['"$i"'].entity.service_instance_guid')

        serivce_app_service_bindings_body=$(cf curl "/v2/service_instances/$service_instance_guid")
        service_instance_last_operation_type=$(get "$serivce_app_service_bindings_body" '.entity.last_operation.type')
        service_instance_last_operation_state=$(get "$serivce_app_service_bindings_body" '.entity.last_operation.state')
        service_name=$(get "$serivce_app_service_bindings_body" '.entity.name')

        if [[ "$service_instance_last_operation_state" =~ "in progress" ]] || [[ "$service_instance_last_operation_state" =~ "failed" ]]; then
            echo "$service_instance_last_operation_state" "$service_name" "$service_instance_last_operation_type"
            break
        fi
    i="$(($i + 1))"
    done
    echo "succeeded"
}

# wait for all services bound to app, before delete
function safeDelete {
  app_name="$1"
  app_guid=$(cf app "$app_name" --guid)
  app_service_bindings_body=$(cf curl "/v2/apps/$app_guid/service_bindings")
  total_results=$(echo "$app_service_bindings_body" | jq '.total_results')

  while [[ $(get_statuses_for_bound_services | grep "in progress") ]]; do
      sleep 3s
  done

  echo "All services bound to $app_name finished their last operation (are no longer in progress)"
  cf delete "$app_name" -f
}

function createOrUpdateService {
  service_instance_name=$1
  service_instance_plan_name=$2
  service_name=$3

  if cf service $service_instance_name; then
    local PLAN=$(cf service "$service_instance_name" | grep "plan:" | awk '{print $2}')
    if [[ $PLAN == $service_instance_plan_name ]]; then
      echo "$service_name service instance $service_instance_name has the same plan $service_instance_plan_name - skipping update..."
      return 0;
    fi
    echo "Updating $service_name service instance $service_instance_name with plan $service_instance_plan_name ..."
    waitForStatusAvailable $service_instance_name
    cf update-service $service_instance_name -p $service_instance_plan_name
  else
    echo "Creating new $service_name service instance $service_instance_name with plan $service_instance_plan_name ..."
    cf create-service "$service_name" $service_instance_plan_name $service_instance_name
  fi
}

function bindAppToService {
  app=$1
  instance_name=$2

  echo "Binding app $app to service $instance_name"
  waitForStatusAvailable $instance_name
  cf bind-service $app $instance_name
}

function bindGroupToService {
  group=$1
  service=$2
 
  echo "Binding group $group to service $service"

  getNewApps "$group"

  instances=($DB_SERVICE_INSTANCES)
  for instance in "${instances[@]}"; do
    instance_name=${instance%:*}
    for app in "${APPS[@]}"; do
      if [[ $instance_name =~ $service* ]]; then
        bindAppToService $app $instance_name
      fi
    done
  done
}

function mapRoutes {
  if [ -z "$1" ]; then
     echo "Cannot map app without a name !"
     exit 1
  fi
  if [ -z "$2" ]; then
    echo "Unknown number of instances !"
    exit 1
  fi

  local APP_NAME=$1
  local INSTANCES=$(expr $2 - 1)
  local DOMAIN=$3

  if [ "$INSTANCES" -lt 1 ]; then
    echo "Found single $APP_NAME instance. Will not map route !!!"
  else
    echo "Mapping $2 (0-$INSTANCES) instances of $APP_NAME in $DOMAIN domain ..."
    for i in `seq 0 $INSTANCES`; do
      cf map-route "$APP_NAME-$i" $DOMAIN --hostname "$APP_NAME"
    done
  fi
}

function purge {
  echo "Purging usage events ..."

  if [ "$SKIP_SSL_VALIDATION" == "true" ]; then
    insecure='--insecure'
  fi

  url_path=$1
  response_code=$(curl $insecure -s -o /dev/null -w "%{http_code}" -X POST -H "Authorization: bearer $token" -i "https://api.$CF_SYS_DOMAIN/$url_path")
  if [ "$response_code" == "204" ]; then
    echo "$2 events purged successfully"
  else
    echo "$2 events purging failed with reposnse code: $response_code"
    exit 1
  fi
}

function checkServiceStatus {
  service_name="$1"
  service_guid=$(cf service "$service_name" --guid)

  read operation status < <(getServiceStatus "$service_guid")

  if [[ "$status" =~ "failed" ]]; then
      cf service "$service_name"
      echo "Operation: $operation of service: $service_name failed!!! Deploy will not start."
      exit 1
  fi

  echo "Operation: $operation of service: $service_name has status: $status. Continuing..."
}

function checkAllServices {
  instances=($DB_SERVICE_INSTANCES)
  for instance in "${instances[@]}"; do
    args=(${instance//:/ })
    checkServiceStatus ${args[0]}
  done;

  checkServiceStatus $RABBIT_INSTANCE_NAME
}
