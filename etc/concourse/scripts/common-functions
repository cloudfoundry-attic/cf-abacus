#!/bin/bash

APPS=()

function getApps {
  local LINE=$(cf apps | awk '{if (NR == 4) {print}}')

  if [ "$LINE" == "No apps found" ]; then
    echo "No apps found"
    APPS=()
  else
    APPS=($(cf apps | tail -n +5 | grep "$1" | awk '{print $1}'))
    echo "Found ${#APPS[@]} applications ..."
  fi
}

function restartApps {
  getApps '?'
  echo ${APPS[@]} | xargs -n1 -P 5 -r cf restart
  getApps '0/'
  echo ${APPS[@]} | xargs -n1 -P 5 -r cf restart
}

function restartAppsWithRetry {
  set +e
  retries=$RESTART_RETRIES
  if [[ -z "$retries" ]]; then
    retries=5
  elif [[ $retries -eq 0 ]]; then
    set -e
    return
  fi

  for (( i=1; i<=$retries ; i++ ))
  do
    if [[ $i -eq $retries ]]; then
      set -e
    fi
    echo "Restarting failed apps (retry $i / $retries) ..."
    restartApps

    if [[ $? -eq 0 ]]; then
      set -e
      return
    fi
  done
}

function waitForServices {
  echo "Waiting for DB creation or update ..."
  services=$1
  for service in "${services[@]}"
  do
    while [[ -z $(cf service $service | grep '\(create\|update\) succeeded\|\(create\|update\) failed') ]]; do
      sleep 3s
    done
    if [[ -n $(cf service $service | grep '\(create\|update\) succeeded') ]]; then
      echo "Creation or update of $service finished successfully."
    else
      echo "Creation or update of $service failed!"
      exit 1
    fi
  done
}

function createOrUpdateService {
  if cf service $1; then
    echo "Updating DB service instance $1 with plan $2 ..."
    cf update-service $1 -p $2
  else
    echo "Creating new DB service instance $1 with plan $2 ..."
    cf create-service "$DB_SERVICE_NAME" $2 $1
  fi
}

function bindService {
  instances=($DB_SERVICE_INSTANCES)
  for dbalias in $(echo $2 | sed "s/,/ /g" | xargs -n1 | sort -u | xargs); do
    for app_prefix in $(echo $1 | sed "s/,/ /g" | xargs -n1 | sort -u | xargs); do
      for instance in "${instances[@]}"; do
        instance_name=${instance%:*}
        for app in "${APPS[@]}"; do
          if [[ $instance_name == $dbalias* && $app == $app_prefix* ]]; then
            cf bind-service $app $instance_name
          fi
        done
      done
    done
  done
}

function mapRoutes {
  if [ -z "$1" ]; then
     echo "Cannot map app without a name !"
     exit 1
  fi
  if [ -z "$2" ]; then
    echo "Unknown number of instances !"
    exit 1
  fi

  local APP_NAME=$1
  local INSTANCES=$(expr $2 - 1)
  local DOMAIN=$3

  set +e # Disable error checks
  cf app $APP_NAME
  single_app=$?
  set -e # Enable error checks

  if [ $single_app = 0 ]; then
    echo "Found single $APP_NAME instance. Will not map route !!!"
  else
    echo "Mapping $2 (0-$INSTANCES) instances of $APP_NAME in $DOMAIN domain ..."
    for i in `seq 0 $INSTANCES`; do
      cf map-route "$APP_NAME-$i" $DOMAIN --hostname "$APP_NAME"
    done
  fi
}

function deleteObsoleteApps {
  local APP_NAME=$1

  if [ $2 = 1 ]; then
    local MIN_INDEX=0
  else
    local MIN_INDEX=$2
  fi

  for i in `seq $MIN_INDEX 5`; do
    cf delete $APP_NAME-$i -f
  done
  if (( $2 > 1 )); then
    cf delete $APP_NAME -f
  fi
}
