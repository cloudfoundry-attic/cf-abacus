#!/bin/bash

set -e -x

SCRIPT_DIR="${BASH_SOURCE%/*}"

echo "Environment:"
env | sort

APPS=()
function getApps {
  local LINE=$(cf apps | awk '{if (NR == 4) {print}}')

  if [ "$LINE" == "No apps found" ]; then
    echo "No apps found"
    APPS=()
  else
    APPS=($(cf apps | tail -n +5 | grep "$1" | awk '{print $1}'))
    echo "Found ${#APPS[@]} applications ..."
  fi
}

function unmapRoutes {
  if [ -z "$1" ]; then
     echo "Cannot map app without a name !"
     exit 1
  fi
  if [ -z "$2" ]; then
    echo "Unknown number of instances !"
    exit 1
  fi

  local APP_NAME=$1
  local INSTANCES=$(expr $2 - 1)

  echo "Unmapping $2 (0-$INSTANCES) instances of $APP_NAME in $CF_DOMAIN domain ..."
  for i in `seq 0 $INSTANCES`;
  do
    cf unmap-route "$APP_NAME-$i" $CF_DOMAIN --hostname "$APP_NAME"
  done
}

#
# Get platform info
#
unamestr=`uname`

#
# Disable error checks
#
set +e

echo "Logging to $CF_ORG/$CF_SPACE @ $CF_API ..."
cf login -a https://api.$CF_API --skip-ssl-validation -u $CF_ADMIN_USER -p $CF_ADMIN_PASSWORD -o $CF_ORG -s $CF_SPACE
abacus_login=$?

if [ $abacus_login = 0 ]; then
  echo "Cleaning up $CF_ORG/$CF_SPACE ..."
  getApps

  echo "Unbinding service instance db ..."
  if [[ "$unamestr" == 'Linux' ]]; then
    echo ${APPS[@]} | xargs -n1 | xargs -P 5 -i cf unbind-service {} db
  else
    echo ${APPS[@]} | xargs -n1 | xargs -P 5 -n 1 -J {} cf unbind-service {} db
  fi

  echo "Deleting service instance db ..."
  cf delete-service -f db

  echo "Unmapping routes ..."
  unmapRoutes abacus-usage-collector 6
  unmapRoutes abacus-usage-reporting 6
fi

#
# Enable error checks
#
set -e

if [ $abacus_login = 0 ]; then
  echo "Waiting for db service instance deletion ..."
  until cf service db | grep -q "Service instance db not found"
  do
    sleep 3s
  done
  echo "Done."
fi

echo "Logging to $CF_API as admin ..."
cf api --skip-ssl-validation "https://api.$CF_API"
echo "" | cf login -u "$CF_ADMIN_USER" -p "$CF_ADMIN_PASSWORD"

echo "Recreating organization and space ..."
cf delete-org -f "$CF_ORG"
cf delete-quota -f "$CF_ORG"
cf create-quota "$CF_ORG" -m 80g -r 80 -s 2 --allow-paid-service-plans
cf create-org "$CF_ORG" -q "$CF_ORG"
cf create-space "$CF_SPACE" -o "$CF_ORG"
cf enable-service-access "$DB_SERVICE_NAME" -p "$DB_PLAN_NAME" -o "$CF_ORG"

echo "Recreating user ..."
cf delete-user -f "$CF_USER"
cf create-user "$CF_USER" "$CF_PASSWORD"
cf set-org-role "$CF_USER" "$CF_ORG" OrgManager
cf set-space-role "$CF_USER" "$CF_ORG" "$CF_SPACE" SpaceManager
cf set-space-role "$CF_USER" "$CF_ORG" "$CF_SPACE" SpaceDeveloper

echo "Logging to $CF_API as abacus user ..."
cf login -a "https://api.$CF_API" -u "$CF_USER" -p "$CF_PASSWORD" -o "$CF_ORG" -s "$CF_SPACE" --skip-ssl-validation

if [ "$CREATE_DB_SERVICE" == "true" ]; then
  echo "Creating new DB service instance ..."
  cf create-service "$DB_SERVICE_NAME" "$DB_PLAN_NAME" db
  until cf service db | grep -q 'Status: create succeeded\|Status: create failed\|Service instance .* not found'
  do
    sleep 3s
  done
  serivice_creation_status=$(cf service db)
  cf service db
  if grep -q 'Status: create succeeded' <<< $serivice_creation_status ; then
    echo "DB creation finished successfully."
  else
    echo "DB creation failed."
    exit 1
  fi
else
  echo "Using DB URL provided in abacus-config !"
fi

$SCRIPT_DIR/create-uaa-clients

if [ "$PURGE_APP_USAGE_EVENTS" == "true" ]; then
  echo "Purging app-usage events ..."
  TOKEN=$(curl --user $CC_CLIENT_ID:$CC_CLIENT_SECRET -s "https://uaa.$CF_API/oauth/token?grant_type=client_credentials" | jq -r .access_token)
  if [ "$TOKEN" == "null" -o -z "$TOKEN" ]; then
    echo "Cannot obtain token for access to CF API !"
    exit 1
  fi
  RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H "Authorization: bearer $TOKEN" -i "https://api.$CF_API/v2/app_usage_events/destructively_purge_all_and_reseed_started_apps")
  if [ "$RESPONSE_CODE" == "204" ]; then
    echo "App events purged successfully"
  else
    echo "Purging failed with reposnse code: $RESPONSE_CODE"
    exit 1
  fi
fi

echo ""
echo "Finished setting up infrastructure."
