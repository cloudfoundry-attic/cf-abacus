#!/bin/bash

set -e -x

echo "Environment:"
env | sort

APPS=()
function getApps {
  local LINE=$(cf apps | awk '{if (NR == 4) {print}}')

  if [ "$LINE" == "No apps found" ]; then
    echo "No apps found"
    APPS=()
  else
    APPS=($(cf apps | tail -n +5 | grep "$1" | awk '{print $1}'))
    echo "Found ${#APPS[@]} applications ..."
  fi
}

#
# Get platform info
#
unamestr=`uname`

#
# Disable error checks
#
set +e

echo "Logging to $CF_ORG/$CF_SPACE @ $CF_API ..."
cf login -a https://api.$CF_API --skip-ssl-validation -u $CF_ADMIN_USER -p $CF_ADMIN_PASSWORD -o $CF_ORG -s $CF_SPACE
abacus_login=$?

if [ $abacus_login = 0 ]; then
  echo "Unbinding service instance db ..."
  if [[ "$unamestr" == 'Linux' ]]; then
    echo ${APPS[@]} | xargs -n1 | xargs -P 5 -i cf unbind-service {} db
  else
    echo ${APPS[@]} | xargs -n1 | xargs -P 5 -n 1 -J {} cf unbind-service {} db
  fi
  echo "Deleting service instance db ..."
  cf delete-service -f db
fi

#
# Enable error checks
#
set -e

if [ $abacus_login = 0 ]; then
  echo "Waiting for db service instance deletion ..."
  until cf service db | grep -q "Service instance db not found"
  do
    sleep 2s
  done
  echo "Done."
fi

echo "Logging to $CF_API ..."
cf api --skip-ssl-validation https://api.$CF_API
echo "" | cf login -u $CF_ADMIN_USER -p $CF_ADMIN_PASSWORD

echo "Recreating organization and space ..."
cf delete-org -f $CF_ORG
cf create-quota $CF_ORG -m 40g -r 40 -s 1 --allow-paid-service-plans
cf create-org $CF_ORG -q $CF_ORG
cf create-space $CF_SPACE -o $CF_ORG

echo "Recreating user ..."
cf delete-user -f $CF_USER
cf create-user $CF_USER $CF_PASSWORD
cf set-org-role $CF_USER $CF_ORG OrgManager
cf set-space-role $CF_USER $CF_ORG $CF_SPACE SpaceManager
cf set-space-role $CF_USER $CF_ORG $CF_SPACE SpaceDeveloper

echo "Logging to UAA ..."
uaac target uaa.$CF_API
uaac token client get "$UAA_ADMIN" -s "$UAA_SECRET"

echo "Trying to delete existing UAA clients ..."
set +e
uaac client delete "$SYSTEM_CLIENT_ID"
uaac client delete "$BRIDGE_CLIENT_ID"
uaac client delete "$CONTAINER_CLIENT_ID"
uaac client delete "$OBJECT_STORAGE_CLIENT_ID"
uaac client delete "$HYSTRIX_CLIENT_ID"
set -e

echo "Creating UAA clients ..."
uaac client add "$SYSTEM_CLIENT_ID" --name "$SYSTEM_CLIENT_ID" --authorized_grant_types client_credentials --authorities abacus.usage.write,abacus.usage.read --scope abacus.usage.write,abacus.usage.read --secret "$SYSTEM_CLIENT_SECRET"
uaac client add "$BRIDGE_CLIENT_ID" --name "$BRIDGE_CLIENT_ID" --authorized_grant_types client_credentials --authorities cloud_controller.admin --secret "$BRIDGE_CLIENT_SECRET"
uaac client add "$CONTAINER_CLIENT_ID" --name "$CONTAINER_CLIENT_ID" --authorized_grant_types client_credentials --authorities abacus.usage.linux-container.write,abacus.usage.linux-container.read --scope abacus.usage.linux-container.write,abacus.usage.linux-container.read --secret "$CONTAINER_CLIENT_SECRET"
uaac client add "$OBJECT_STORAGE_CLIENT_ID" --name "$OBJECT_STORAGE_CLIENT_ID" --authorized_grant_types client_credentials --authorities abacus.usage.object-storage.write,abacus.usage.object-storage.read --scope abacus.usage.object-storage.write,abacus.usage.object-storage.read --secret "$OBJECT_STORAGE_CLIENT_SECRET"
uaac client add "$HYSTRIX_CLIENT_ID" --name "$HYSTRIX_CLIENT_ID" --authorized_grant_types client_credentials --authorities abacus.system.read --scope abacus.system.read --secret "$HYSTRIX_CLIENT_SECRET"

echo ""
echo "Finished setting up infrastructure."