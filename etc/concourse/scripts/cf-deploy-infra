#!/bin/bash

set -e

SCRIPT_DIR="${BASH_SOURCE%/*}"
source ${SCRIPT_DIR}/common-functions

if [ "$SKIP_SSL_VALIDATION" == "true" ]; then
  skip='--skip-ssl-validation'
fi

echo "Logging to $CF_SYS_DOMAIN as admin ..."
cf api $skip "https://api.$CF_SYS_DOMAIN"

echo "" | cf login $skip -u "$CF_ADMIN_USER" -p "$CF_ADMIN_PASSWORD"

echo "Recreating organization and space ..."
cf create-quota "$CF_ORG" -m "$ABACUS_ORG_MEMORY_QUOTA" -i 4g -r "$ABACUS_ORG_ROUTES_QUOTA" -s "$ABACUS_ORG_SERVICES_QUOTA" --allow-paid-service-plans
cf update-quota "$CF_ORG" -m "$ABACUS_ORG_MEMORY_QUOTA" -i 4g -r "$ABACUS_ORG_ROUTES_QUOTA" -s "$ABACUS_ORG_SERVICES_QUOTA" --allow-paid-service-plans
cf create-org "$CF_ORG" -q "$CF_ORG"
cf create-space "$CF_SPACE" -o "$CF_ORG"

if [ "$ENABLE_SERVICE_ACCESS" == "true" ]; then
  if cf marketplace -s "$DB_SERVICE_NAME" | grep -e "$DB_PLAN_NAME"; then
    echo "$DB_SERVICE_NAME already enabled";
  else
    cf enable-service-access "$DB_SERVICE_NAME" -p "$DB_PLAN_NAME" -o "$CF_ORG"
  fi

  if cf marketplace -s "$RABBIT_SERVICE_NAME" | grep -e "$RABBIT_INSTANCE_PLAN_NAME"; then
    echo "$RABBIT_SERVICE_NAME already enabled";
  else
    cf enable-service-access "$RABBIT_SERVICE_NAME" -p "$RABBIT_INSTANCE_PLAN_NAME" -o "$CF_ORG"
  fi
fi

echo "Recreating user ..."
cf delete-user -f "$CF_USER"
cf create-user "$CF_USER" "$CF_PASSWORD"
cf set-org-role "$CF_USER" "$CF_ORG" OrgManager
cf set-space-role "$CF_USER" "$CF_ORG" "$CF_SPACE" SpaceManager
cf set-space-role "$CF_USER" "$CF_ORG" "$CF_SPACE" SpaceDeveloper

if [ "$BIND_SECURITY_GROUP" == "true" ]; then
  $SCRIPT_DIR/bind-security-group
fi

echo "Logging to $CF_SYS_DOMAIN as abacus user ..."
cf login $skip -a "https://api.$CF_SYS_DOMAIN" -u "$CF_USER" -p "$CF_PASSWORD" -o "$CF_ORG" -s "$CF_SPACE"

if [ "$CREATE_DB_SERVICE" == "true" ]; then
  echo "Creating or updating DB service instances ..."
  instances=($DB_SERVICE_INSTANCES)
  shouldWaitFor=()
  for instance in "${instances[@]}"; do
    args=(${instance//:/ })
    createOrUpdateService ${args[0]} ${args[1]}
    shouldWaitFor+=(${args[0]})
  done;
  waitForServices "${shouldWaitFor[@]}"
else
  echo "Using DB URL provided in abacus-config !"
fi

# create RabbitMQ instance
echo "Creating or updating Rabbit service instances ..."
shouldWaitFor=($RABBIT_INSTANCE_NAME)
createOrUpdateRabbitService $RABBIT_INSTANCE_NAME $RABBIT_INSTANCE_PLAN_NAME
waitForServices $shouldWaitFor

if [ -e "landscape/abacus-config/deploy/bin/post-infra" ]; then
  echo "Running post-infra script ..."
  landscape/abacus-config/deploy/bin/post-infra
fi

echo ""
echo "Finished setting up infrastructure."
