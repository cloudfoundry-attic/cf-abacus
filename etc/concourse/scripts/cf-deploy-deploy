#!/bin/bash

set -e -x

echo "Environment:"
env | sort

#
# Get platform info
#
unamestr=`uname`

function mapRoutes {
  if [ -z "$1" ]; then
     echo "Cannot map app without a name !"
     exit 1
  fi
  if [ -z "$2" ]; then
    echo "Unknown number of instances !"
    exit 1
  fi

  local APP_NAME=$1
  local INSTANCES=$(expr $2 - 1)

  set +e # Disable error checks
  cf app abacus-usage-collector
  single_app=$?
  set -e # Enable error checks

  if [ $single_app = 0 ]; then
    echo "Found single $APP_NAME instance. Will not map route !!!"
  else
    echo "Mapping $2 (0-$INSTANCES) instances of $APP_NAME in $CF_DOMAIN domain ..."
    for i in `seq 0 $INSTANCES`;
    do
      cf map-route "$APP_NAME-$i" $CF_DOMAIN --hostname "$APP_NAME"
    done
  fi
}

source build-project/etc/concourse/scripts

echo "Logging to $CF_API ..."
if [ "$SKIP_SSL_VALIDATION" == "true" ]; then
  skip='--skip-ssl-validation'
fi

cf login -a https://api.$CF_API -u $CF_USER -p $CF_PASSWORD -o $CF_ORG -s $CF_SPACE $skip

echo "Pushing $ABACUS_PROFILE Abacus installation ..."
pushd built-project
  npm run cfstage -- $ABACUS_PROFILE
popd

echo "Mapping routes ..."
mapRoutes abacus-usage-collector 6
mapRoutes abacus-usage-reporting 6

getApps

if [ "$BIND_DB_SERVICE" == "true" ]; then
  echo "Binding services ..."
  if [[ "$unamestr" == 'Linux' ]]; then
    echo ${APPS[@]} | xargs -n1 | xargs -P 5 -i cf bind-service {} db
  else
    echo ${APPS[@]} | xargs -n1 | xargs -P 5 -n 1 -J {} cf bind-service {} db
  fi
fi

set +e
echo "Starting applications ..."
echo ${APPS[@]} | xargs -n1 -P 5 cf start

echo "Applications:"
cf apps

echo "Restarting failed apps ..."
for i in {1..3}
do
  echo "Restarting failed apps (retry $i / 5) ..."
  restartApps
done
set -e

echo "Restarting failed apps ..."
restartApps

echo "Applications:"
cf apps

echo "Deploy finished"
