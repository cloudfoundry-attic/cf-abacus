'use strict';

var _ = require('underscore');
var extend = _.extend;

var child = require('child_process');
var mkdirp = require('mkdirp');
var fs = require('fs');
var yaml = require('js-yaml');

var manifest = {
  applications: [{
    name: 'abacus-usage-accumulator',
    host: 'abacus-usage-accumulator',
    path: '.cfpack/app.zip',
    instances: 1,
    memory: '512M',
    disk_quota: '512M',
    env: {
      CONF: 'default',
      DEBUG: 'e-abacus-*',
      DBCLIENT: 'abacus-mongoclient',
      AGGREGATOR: 'abacus-usage-aggregator',
      PROVISIONING: 'abacus-provisioning-plugin',
      ACCOUNT: 'abacus-account-plugin',
      EUREKA: 'abacus-eureka-plugin',
      NODE_MODULES_CACHE: false,
      SLACK: '5D',
      SECURED: true
    }
  }]
};

var createManifestContent = function createManifestContent(testEnv) {
  var content = extend({}, manifest);

  var env = content.applications[0].env;
  content.applications[0].env = extend(env, testEnv);

  return yaml.dump(content);
};

var templateContent = createManifestContent({
  TEST_VARIABLE: '$TEST_VARIABLE',
  ANOTHER_TEST_VARIABLE: '$ANOTHER_TEST_VARIABLE'
});
var expectedManifestContent = createManifestContent({
  TEST_VARIABLE: 'value1',
  ANOTHER_TEST_VARIABLE: 'value2'
});

var credentialsContent = '---\n' + 'test-variable: value1\n' + 'another-test-variable: value2';

var replaceTemplateRoot = __dirname + '/../..';

var createTemporaryFiles = function createTemporaryFiles(tempDir, tempTemplateFile, tempCredentailsFile, done) {
  mkdirp(tempDir, function (err) {
    expect(err).to.equal(null);
    fs.writeFile(tempTemplateFile, templateContent, function (err) {
      expect(err).to.equal(null);
      fs.writeFile(tempCredentailsFile, credentialsContent, function (err) {
        expect(err).to.equal(null);
        done();
      });
    });
  });
};

var deleteFolderRecursive = function deleteFolderRecursive(path) {
  if (fs.existsSync(path)) {
    fs.readdirSync(path).forEach(function (file) {
      var curPath = path + '/' + file;
      if (fs.lstatSync(curPath).isDirectory()) deleteFolderRecursive(curPath);else fs.unlinkSync(curPath);
    });
    fs.rmdirSync(path);
  }
};

var runScript = function runScript(abacusConfigDir, credentialsFile, environment, done) {
  var args = [];
  if (abacusConfigDir) args.push(abacusConfigDir);
  if (credentialsFile) args.push(credentialsFile);

  var replaceTemplate = child.spawn('./replace-template', args, {
    cwd: replaceTemplateRoot,
    env: extend(process.env, environment)
  });

  replaceTemplate.stdout.on('data', function (data) {
    return process.stdout.write(data);
  });
  replaceTemplate.stderr.on('data', function (data) {
    return process.stderr.write(data);
  });

  replaceTemplate.on('exit', function (code) {
    done(code);
  });
};

var checkManifest = function checkManifest(tempManifestFile, expectedContent, done) {
  fs.readFile(tempManifestFile, 'utf8', function (err, content) {
    expect(err).to.equal(null);
    expect(content).to.equal(expectedContent);

    done();
  });
};

describe('replace-templates', function () {
  var tempConfigDir = replaceTemplateRoot + '/abacus-config';
  var tempWorkingDir = tempConfigDir + '/lib/aggregation/accumulator';
  var tempTemplateFile = tempWorkingDir + '/manifest.yml.template';
  var tempManifestFile = tempWorkingDir + '/manifest.yml';
  var tempCredentialsFile = tempWorkingDir + '/credentials.yml';

  beforeEach(function (done) {
    createTemporaryFiles(tempWorkingDir, tempTemplateFile, tempCredentialsFile, done);
  });

  afterEach(function () {
    deleteFolderRecursive(tempConfigDir);
  });

  context('when using environment variables', function () {
    beforeEach(function (done) {
      runScript(tempConfigDir, undefined, {
        TEST_VARIABLE: 'value1',
        ANOTHER_TEST_VARIABLE: 'value2'
      }, function (code) {
        expect(code).to.equal(0);
        done();
      });
    });

    it('replaces all placeholders in template', function (done) {
      checkManifest(tempManifestFile, expectedManifestContent, done);
    });
  });

  context('when using credentials file', function () {
    beforeEach(function (done) {
      runScript(tempConfigDir, tempCredentialsFile, undefined, function (code) {
        expect(code).to.equal(0);
        done();
      });
    });

    it('replaces all placeholders in template', function (done) {
      checkManifest(tempManifestFile, expectedManifestContent, done);
    });
  });

  context('with both credentials file and environment', function () {
    beforeEach(function (done) {
      runScript(tempConfigDir, tempCredentialsFile, {
        TEST_VARIABLE: 'invalid_value1',
        ANOTHER_TEST_VARIABLE: 'invalid_value2'
      }, function (code) {
        expect(code).to.equal(0);
        done();
      });
    });

    it('replaces all placeholders using credentials file', function (done) {
      checkManifest(tempManifestFile, expectedManifestContent, done);
    });
  });

  context('without abacus-config', function () {
    context('without credentials', function () {
      it('errors', function (done) {
        runScript(undefined, undefined, undefined, function (code) {
          expect(code).to.equal(1);
          done();
        });
      });
    });

    context('with credentials', function () {
      it('errors', function (done) {
        runScript(undefined, tempCredentialsFile, undefined, function (code) {
          expect(code).to.equal(1);
          done();
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,